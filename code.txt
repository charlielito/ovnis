import numpy as np
import math

def find_fibonacci_index(n):
    """
    Find the index of a given fibonacci number n.
    If the provided number is not an interger, it will be casted as such.
    
    """
    n = int(n)
    if n == 0:
        return 0
    elif n < 0:
        raise RunTimeError("Fibonnacci numbers are only defined for positive integers")
    else:
        eps = 10**-10
        phi = (1+math.sqrt(5))/2 
        fibonacci_index = int(round(math.log(n * math.sqrt(5)+eps)/math.log(phi)))
        return fibonacci_index

def fib(idx):
    phi = (1+math.sqrt(5))/2
    return math.floor((phi**idx)/math.sqrt(5) + 0.5)
        
def prev_two_fibonacci(n):
    """
    Find the previous two fibonacci's numbers given
    a fibonacci number.
    
    """
    if n <= 0:
        raise RuntimeError("Zero is the first fibonacci number")
    else:
        idx = find_fibonacci_index(n)
        return fib(idx-1), fib(idx-2)

prev_two_fibonacci(6765)

def transpose_antidiagonal(matrix):
    """Transpose a matrix by the antidiagonal.
    
    Args:
        matrix: a 2d numpy.ndarray
        
    Return:
        The transposed matrix
    """

    return matrix[::-1, ::-1].T

source = np.array([[11,12,13,14],[21,22,23,24],[31,32,33,34],[41,42,43,44]])
transpose_antidiagonal(source)

def get_unique_and_sort(iterable):
    """Get a sorted list of the unique elements of iterable
    
    Args:
        iterable: a 1 dimensional array 
    
    Returns:
        A sorted list of the unique elements from the iterable
    """
    unique = set(iterable)
    ordered = sorted(unique)
    return ordered

get_unique_and_sort([10,8,1,1,3,6,2])